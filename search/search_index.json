{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pinion \u2014 Nice-looking interactive diagrams for KiCAD PCBs Pinion is a simple tool that allows you to make a nice-looking pinout diagrams for your PCBs like this (see also a standalone version ). For the sake of clarity what is documentation and what is the diagram, we put it inside a frame \u2014 in production, you can seamlessly include it in your page. pinion.setup(document.getElementById(\"pinionDemo-plot\"), { source: \"resources/alksDemo-plotted\" }); The diagrams are static HTML & Javascript files that you can easily include in your documentation. You do not need any backend, so you can easily serve them on your web page or Github pages. It is really simple! You can also use a 3D-rendered preview of the board instead of the stylized one: pinion.setup(document.getElementById(\"pinionDemo-render\"), { source: \"resources/alksDemo-rendered\" }); Making your first diagram ...is easy. Just install Pinion and then follow the walkthrough . Pinion is broken. What can I do about it? If something is not working as expected, please open an issue on GitHub . Please, provide as many resources as possible and clear instructions on reproduction of the bug. If you have a proposal for a new feature or you are just unsure about Pinion usage, you can start a discussion on GitHub . Do you enjoy Pinion or does it save your time? Then definitely consider supporting me on GitHub Sponsors or buy me a coffee: You support will allow me to allocate time to properly maintain my projects like this. PS: Be sure to check out my other KiCAD & PCB related projects: KiKit PcbDraw JlcParts","title":"Home"},{"location":"#pinion-nice-looking-interactive-diagrams-for-kicad-pcbs","text":"Pinion is a simple tool that allows you to make a nice-looking pinout diagrams for your PCBs like this (see also a standalone version ). For the sake of clarity what is documentation and what is the diagram, we put it inside a frame \u2014 in production, you can seamlessly include it in your page. pinion.setup(document.getElementById(\"pinionDemo-plot\"), { source: \"resources/alksDemo-plotted\" }); The diagrams are static HTML & Javascript files that you can easily include in your documentation. You do not need any backend, so you can easily serve them on your web page or Github pages. It is really simple! You can also use a 3D-rendered preview of the board instead of the stylized one: pinion.setup(document.getElementById(\"pinionDemo-render\"), { source: \"resources/alksDemo-rendered\" });","title":"Pinion \u2014 Nice-looking interactive diagrams for KiCAD PCBs"},{"location":"#making-your-first-diagram","text":"...is easy. Just install Pinion and then follow the walkthrough .","title":"Making your first diagram"},{"location":"#pinion-is-broken-what-can-i-do-about-it","text":"If something is not working as expected, please open an issue on GitHub . Please, provide as many resources as possible and clear instructions on reproduction of the bug. If you have a proposal for a new feature or you are just unsure about Pinion usage, you can start a discussion on GitHub .","title":"Pinion is broken. What can I do about it?"},{"location":"#do-you-enjoy-pinion-or-does-it-save-your-time","text":"Then definitely consider supporting me on GitHub Sponsors or buy me a coffee: You support will allow me to allocate time to properly maintain my projects like this. PS: Be sure to check out my other KiCAD & PCB related projects: KiKit PcbDraw JlcParts","title":"Do you enjoy Pinion or does it save your time?"},{"location":"diagramWalkthrough/","text":"Making a diagram To make a diagram you have to: specify which pins and components should be highlightable. This is done via specifying a simple YAML file. Build the diagram. This will generate a directory with several files. Embed it in your webpage/documentation. Basic concepts Pinion consists of two parts - diagram generator pinion (that you run on your computer) and a Javascript library that you include on your webpage, which reads and displays the diagram ( pinion-widget ). Pinion can highlight components and pins of components. Each of these objects can have assigned a verbose description. This description is shown on mouse hover/click. Each object can belong to any number of groups. The user has the ability to highlight a given group. Defining a diagram The diagram is specified via YAML file with the following structure: name: <name of the diagram> description: <diagram description> components: # A dictionary of component reference to component description <componentRef>: description: <component description> groups: <a list of groups> highlight: true/false highlightBoth: true/false # Forces that the component can be highlighted on both front and back pins: # A dictionary of pin names to pin description <pinName>: name: <human readable name of the pin> description: <pin description> alias: <pinName> # Use description of other pin. Alternative for description groups: <a list of groups> groups: # An optional dictionary specifying tree structure of the groups, e.g.: Peripherals: - Adc - SPI - I2C Pins: - Digital - Analog Note that you can use markdown in descriptions to make them pretty. You should specify only the pins and components you want to be highlightable. It you remember the example diagram , it was generated by the this YAML file . To save you some typing, Pinion can generate a template for your. Simply invoke: pinion template \\ --board <path to .kicad_pcb file> \\ --output <path to YAML file> \\ --components <reqular expression for the reference> --components <you can specify multiple patterns if you need to> Then you can modify the template as you need. Building the diagram To build the diagram, simply invoke: # For stylized image style: pinion generate plotted \\ --board <path to .kicad_pcb file> \\ --specification <your YAML file> \\ <path to output directory> # For 3D rendered pinion generate rendered \\ --board <path to .kicad_pcb file> \\ --specification <your YAML file> \\ <path to output directory> This will generate all files required. Note that the board image is generated via PcbDraw . Therefore, if you struggle to generate the board image correctly, try using PcbDraw directly first to locate the issue. Note that you can also specify the option --pack that will include pinion-widget and a simple, stand-alone page with the diagram. You should upload the entire directory on your web page. Options for stylized diagrams You can pass PcbDraw options to pinion generate to e.g., remap your components, specify color scheme or point PcbDraw to the right libraries. You read more about the details at PcbDraw documentation . The supported options are: - --dpi to specify image DPI - --style to specify style (i.e., color scheme) - --libs to specify the footprint library - --remap to remap component footprints - --filter to hide some footprint on the board. Options for 3D-rendered diagrams The 3D rendered diagrams currently work only on Linux due to technical limitations of KiCAD. You can also specify the following options: - `--renderer [raytrace|normal]`: Specify what renderer to use (the OpenGL preview or raytracing) - `--projection [orthographic|perspective]`: Specify projection - `--no-components`: Exclude components from from rendering - `--transparent `: Make transparent background of the image (so, e.g., the shadow of the image can be properly rendered) Testing the diagram When you invoke pinion generate with --pack you can test the diagram without embedding it in a web page. The option --pack will pack the diagram with Pinion widget and a simple page that includes the widget. Then simply invoke pinion serve -b --directory <diagram directory> to preview the diagram in your browser. Including the pinion widget on your webpage Including pinion on a web page is simple. Just include the pinion-widget script, stylesheets and set it up: <div id=\"pinionDemo\"></div> <script src=\"resources/pinion.js\"></script> <link rel=\"stylesheet\" href=\"resources/pinion.css\"> <script> pinion.setup(document.getElementById(\"pinionDemo\"), { source: \"resources/alksDemo\" }); </script> The first block creates a container in which we will the widget will be included. It can be anywhere on the page. Note that we will later need to reference this container, so we specify an id for it. The second block loads pinion code and styles. You can either host these files by yourself or use CDN (will be specified later). The precise location depends on your setup. In the third block, we start the widget. The first argument of pinion.setup is the container for the widget and the second argument is a dictionary that configures the widget. Currently, the only option is source that has to contain a location to the source directory (note that it can also be an absolute path). And this is it. When you load your page, the diagram should be running!","title":"Making a diagram"},{"location":"diagramWalkthrough/#making-a-diagram","text":"To make a diagram you have to: specify which pins and components should be highlightable. This is done via specifying a simple YAML file. Build the diagram. This will generate a directory with several files. Embed it in your webpage/documentation.","title":"Making a diagram"},{"location":"diagramWalkthrough/#basic-concepts","text":"Pinion consists of two parts - diagram generator pinion (that you run on your computer) and a Javascript library that you include on your webpage, which reads and displays the diagram ( pinion-widget ). Pinion can highlight components and pins of components. Each of these objects can have assigned a verbose description. This description is shown on mouse hover/click. Each object can belong to any number of groups. The user has the ability to highlight a given group.","title":"Basic concepts"},{"location":"diagramWalkthrough/#defining-a-diagram","text":"The diagram is specified via YAML file with the following structure: name: <name of the diagram> description: <diagram description> components: # A dictionary of component reference to component description <componentRef>: description: <component description> groups: <a list of groups> highlight: true/false highlightBoth: true/false # Forces that the component can be highlighted on both front and back pins: # A dictionary of pin names to pin description <pinName>: name: <human readable name of the pin> description: <pin description> alias: <pinName> # Use description of other pin. Alternative for description groups: <a list of groups> groups: # An optional dictionary specifying tree structure of the groups, e.g.: Peripherals: - Adc - SPI - I2C Pins: - Digital - Analog Note that you can use markdown in descriptions to make them pretty. You should specify only the pins and components you want to be highlightable. It you remember the example diagram , it was generated by the this YAML file . To save you some typing, Pinion can generate a template for your. Simply invoke: pinion template \\ --board <path to .kicad_pcb file> \\ --output <path to YAML file> \\ --components <reqular expression for the reference> --components <you can specify multiple patterns if you need to> Then you can modify the template as you need.","title":"Defining a diagram"},{"location":"diagramWalkthrough/#building-the-diagram","text":"To build the diagram, simply invoke: # For stylized image style: pinion generate plotted \\ --board <path to .kicad_pcb file> \\ --specification <your YAML file> \\ <path to output directory> # For 3D rendered pinion generate rendered \\ --board <path to .kicad_pcb file> \\ --specification <your YAML file> \\ <path to output directory> This will generate all files required. Note that the board image is generated via PcbDraw . Therefore, if you struggle to generate the board image correctly, try using PcbDraw directly first to locate the issue. Note that you can also specify the option --pack that will include pinion-widget and a simple, stand-alone page with the diagram. You should upload the entire directory on your web page.","title":"Building the diagram"},{"location":"diagramWalkthrough/#options-for-stylized-diagrams","text":"You can pass PcbDraw options to pinion generate to e.g., remap your components, specify color scheme or point PcbDraw to the right libraries. You read more about the details at PcbDraw documentation . The supported options are: - --dpi to specify image DPI - --style to specify style (i.e., color scheme) - --libs to specify the footprint library - --remap to remap component footprints - --filter to hide some footprint on the board.","title":"Options for stylized diagrams"},{"location":"diagramWalkthrough/#options-for-3d-rendered-diagrams","text":"The 3D rendered diagrams currently work only on Linux due to technical limitations of KiCAD. You can also specify the following options: - `--renderer [raytrace|normal]`: Specify what renderer to use (the OpenGL preview or raytracing) - `--projection [orthographic|perspective]`: Specify projection - `--no-components`: Exclude components from from rendering - `--transparent `: Make transparent background of the image (so, e.g., the shadow of the image can be properly rendered)","title":"Options for 3D-rendered diagrams"},{"location":"diagramWalkthrough/#testing-the-diagram","text":"When you invoke pinion generate with --pack you can test the diagram without embedding it in a web page. The option --pack will pack the diagram with Pinion widget and a simple page that includes the widget. Then simply invoke pinion serve -b --directory <diagram directory> to preview the diagram in your browser.","title":"Testing the diagram"},{"location":"diagramWalkthrough/#including-the-pinion-widget-on-your-webpage","text":"Including pinion on a web page is simple. Just include the pinion-widget script, stylesheets and set it up: <div id=\"pinionDemo\"></div> <script src=\"resources/pinion.js\"></script> <link rel=\"stylesheet\" href=\"resources/pinion.css\"> <script> pinion.setup(document.getElementById(\"pinionDemo\"), { source: \"resources/alksDemo\" }); </script> The first block creates a container in which we will the widget will be included. It can be anywhere on the page. Note that we will later need to reference this container, so we specify an id for it. The second block loads pinion code and styles. You can either host these files by yourself or use CDN (will be specified later). The precise location depends on your setup. In the third block, we start the widget. The first argument of pinion.setup is the container for the widget and the second argument is a dictionary that configures the widget. Currently, the only option is source that has to contain a location to the source directory (note that it can also be an absolute path). And this is it. When you load your page, the diagram should be running!","title":"Including the pinion widget on your webpage"},{"location":"faq/","text":"Frequently asked questions Pinion says pcbnew: no module found This message probably means that you either: you are running Windows or Mac. In that case until KiCAD 6 is released, you have to use one of the alternative methods of usage - see installation . you are running Linux, but you don't have KiCAD installed The diagram does not show up! If the diagram does not show up, there can be several reasons: you have either script or source location wrong. Open developer tools in your browser and inspect logs what went wrong. you open a page from local file system (the URL in browser starts with file:// ). In that case pinion-widget is not able to load the specification as modern browsers prevent from loading local files (due to security reasons). Try running pinion server -b -d <directory> with the directory containing the diagram.","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently asked questions"},{"location":"faq/#pinion-says-pcbnew-no-module-found","text":"This message probably means that you either: you are running Windows or Mac. In that case until KiCAD 6 is released, you have to use one of the alternative methods of usage - see installation . you are running Linux, but you don't have KiCAD installed","title":"Pinion says pcbnew: no module found"},{"location":"faq/#the-diagram-does-not-show-up","text":"If the diagram does not show up, there can be several reasons: you have either script or source location wrong. Open developer tools in your browser and inspect logs what went wrong. you open a page from local file system (the URL in browser starts with file:// ). In that case pinion-widget is not able to load the specification as modern browsers prevent from loading local files (due to security reasons). Try running pinion server -b -d <directory> with the directory containing the diagram.","title":"The diagram does not show up!"},{"location":"installation/","text":"Installation of Pinion Pinion is a Python program. You can simply install it via pip: pip3 install pinion To run pinion, you will also need KiCAD 6 installed on your computer. On Windows, you have to make sure that you run all Pinion commands inside KiCAD Command Prompt , not in the regular command prompt. Also note that the 3D rendered models currently work only on Linux. Optionally, you can use Windows subsystem for Linux or suitable Docker image for running pinion. Once you have Pinion installed, you can verify it by running: pinion --help If everything is working, proceed to making your first diagram . Installing the nightly version of Pinion If you are interested in getting the latest features, you can install the nightly version of Pinon. This version is built automatically from the master branch and comes with newest features, however, it is not guaranteed to be stable. First, download the Python package . Then install it via pip: pip3 install pinion-latest.whl","title":"Installation"},{"location":"installation/#installation-of-pinion","text":"Pinion is a Python program. You can simply install it via pip: pip3 install pinion To run pinion, you will also need KiCAD 6 installed on your computer. On Windows, you have to make sure that you run all Pinion commands inside KiCAD Command Prompt , not in the regular command prompt. Also note that the 3D rendered models currently work only on Linux. Optionally, you can use Windows subsystem for Linux or suitable Docker image for running pinion. Once you have Pinion installed, you can verify it by running: pinion --help If everything is working, proceed to making your first diagram .","title":"Installation of Pinion"},{"location":"installation/#installing-the-nightly-version-of-pinion","text":"If you are interested in getting the latest features, you can install the nightly version of Pinon. This version is built automatically from the master branch and comes with newest features, however, it is not guaranteed to be stable. First, download the Python package . Then install it via pip: pip3 install pinion-latest.whl","title":"Installing the nightly version of Pinion"}]}